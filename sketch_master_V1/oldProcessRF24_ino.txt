void ProcessRF24()
{
/****************** Ping Out Role ***************************/
//  if (role == role_ping_out)  {
    
    radio.stopListening();                                    // First, stop listening so we can talk.
    
    #ifdef DO_DEBUG
      printf("Now sending \n\r");
    #endif
    delay(10);
    unsigned long time = micros();      // Take the time, and send it.  This will block until complete
    byte RFMessage[9] = "87654321"; 
//  if (!radio.write( &time, sizeof(unsigned long) )){  printf("failed.\n\r");  }
//    if (!radio.write( &RFMessage, 8 )){  printf("failed.\n\r");  }
//    radio.writeFast( &RFMessage, 8 );
    radio.write( &RFMessage, 8 );
    delay (5);    
    #ifdef DO_DEBUG
      printf("Listening... \n\r");
    #endif
    radio.startListening();                                    // Now, continue listening

    delay(5);
    
    unsigned long started_waiting_at = micros();               // Set up a timeout period, get the current microseconds
    boolean timeout = false;                                   // Set up a variable to indicate if a response was received or not
    
    while ( ! radio.available() ){                             // While nothing is received
      if (micros() - started_waiting_at > 2000000 ){            // If waited longer than 200ms, indicate timeout and exit while loop
          timeout = true;
          break;
      }      
    }
        
    if ( timeout ){       // Describe the results
      #ifdef DO_DEBUG
        printf("Failed, response timed out.\n\r");
      #endif
    }else{
        unsigned long got_time;                                 // Grab the response, compare, and send to debugging spew
        byte RFAntwoord[9] = "00000000"; 
        radio.read( &RFAntwoord, 8 );

        // Spew it
        #ifdef DO_DEBUG
          printf("Sent %s, Got response %s, round-trip delay: %lu microseconds\n\r",RFMessage,RFAntwoord,micros()-got_time);
        #endif
    }

    // Try again 1s later
    delay(1000);
//  }

/****************** Pong Back Role ***************************/

/*  if ( role == role_pong_back )
  {
    if( radio.available()){
      unsigned long got_time;                                       // Variable for the received timestamp
      while (radio.available()) {                                   // While there is data ready
        radio.read( &got_time, sizeof(unsigned long) );             // Get the payload
      }    
     
      radio.stopListening();                                        // First, stop listening so we can talk   
      radio.write( &got_time, sizeof(unsigned long) );              // Send the final one back.      
      radio.startListening();                                       // Now, resume listening so we catch the next packets.     
      printf("Sent response %lu \n\r", got_time);  
   }
 } */


/****************** Change Roles via Serial Commands ***************************/

/*  if ( Serial.available() )
  {
    char c = toupper(Serial.read());
    if ( c == 'T' && role == role_pong_back )
    {
      printf("*** CHANGING TO TRANSMIT ROLE -- PRESS 'R' TO SWITCH BACK\n\r");

      role = role_ping_out;                  // Become the primary transmitter (ping out)
      radio.openWritingPipe(addresses[0]);
      radio.openReadingPipe(1,addresses[1]);
  
    }
    else if ( c == 'R' && role == role_ping_out )
    {
      printf("*** CHANGING TO RECEIVE ROLE -- PRESS 'T' TO SWITCH BACK\n\r");
      
       role = role_pong_back;                // Become the primary receiver (pong back)
       radio.openWritingPipe(addresses[1]);
       radio.openReadingPipe(1,addresses[0]);
    }
  } */
}  


